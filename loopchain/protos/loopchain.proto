// proto file for gRPC interface.

syntax = "proto2";


// Peer Outer Service for other Peers
service PeerService {
    // get status of Peer
    rpc GetStatus (StatusRequest) returns (StatusReply) {}
    // Block Height sync assistant
    rpc BlockSync (BlockSyncRequest) returns (BlockSyncReply) {}
    // broadcast proposed block
    rpc AnnounceUnconfirmedBlock (BlockSend) returns (CommonReply) {}
    // elect new Leader
    rpc ComplainLeader (ComplainLeaderRequest) returns (CommonReply) {}

    // broadcast transactions
    rpc AddTxList (TxSendList) returns (CommonReply) {}
    // broadcast vote on proposed block
    rpc VoteUnconfirmedBlock (BlockVote) returns (CommonReply) {}

    // exchange height info
    rpc BlockHeightRequest (HeightRequest) returns (CommonReply) {}
    rpc BlockHeightResponse (PeerHeight) returns (CommonReply) {}
    rpc BlockRequest (PeerHeight) returns (CommonReply) {}
}

message StatusRequest {
    required string request = 1;
    optional string channel = 2;
}

message StatusReply {
    required string status = 1;
    required int32 block_height = 2;
    required int32 total_tx = 3;
    optional int32 unconfirmed_block_height = 4;
    optional int32 is_leader_complaining = 5;
    optional string peer_id = 6;
}

// For Block Sync
message BlockSyncRequest {
    optional string block_hash = 1;
    optional int32 block_height = 2;
    optional string channel = 3; // channel ID for multichain network
}

message BlockSyncReply {
    required int32 response_code = 1;
    required int32 block_height = 2;
    required int32 max_block_height = 3;
    optional bytes confirm_info = 4;
    optional bytes block = 5;
    required int32 unconfirmed_block_height = 6;
}

message HeightRequest {
    required string peer = 1;
    required string channel = 2; // channel ID for multichain network
}

message PeerHeight {
    required string peer = 1;
    required string channel = 2; // channel ID for multichain network
    required int32 height = 3;
}

// Peer send Block by AnnounceUnconfirmedBlock
message BlockSend {
    required bytes block = 1;
    required int32 round_ = 2;
    optional string channel = 3; // channel ID for multichain network
}

// elect new Leader Message
message ComplainLeaderRequest {
    required string complain_vote = 1;
    optional string channel = 2;
}

message TxSend {
    optional bytes tx = 1;
    optional string tx_json = 2;
    optional string channel = 3; // channel ID for multichain network
}

message TxSendList {
    required string channel = 1;
    repeated TxSend tx_list = 2;
}

message BlockVote {
    required string vote = 1;  // has same values of response_code
    optional string channel = 2; // channel ID for multichain network
}

message CommonRequest {
    required string request = 1;
    optional string channel = 2; // channel ID for multichain network
    optional string group_id = 3;
}

message CommonReply {
    required int32 response_code = 1;
    required string message = 2;
}

// Enum Types
enum PeerType {
    PEER = 0;
    BLOCK_GENERATOR = 1;
}

enum NodeType {
    CitizenNode = 1;
    CommunityNode = 3;
}
